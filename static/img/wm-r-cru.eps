%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.1 (Build 18B75) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 344 154
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 344 154
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.93725491 0.2 0.25098041 sc
q
175.01601 118.25377 m
186.63387 118.25377 l
186.63387 124.07714 l
175.01601 124.07714 l
175.01601 131.84163 l
189.44627 131.84163 l
189.44627 137.66655 l
169.02299 137.66655 l
169.02299 103.69302 l
175.01601 103.69302 l
175.01601 118.25377 l
W*
0 0 344 154 rc
164.02299 142.66655 m
194.44627 142.66655 l
194.44627 98.693024 l
164.02299 98.693024 l
h
f
Q
q
199.33853 132.74292 m
200.60426 134.07384 200.60426 136.3076 199.33853 137.64009 c
198.07428 138.97101 195.95387 138.97101 194.68814 137.64009 c
193.42241 136.3076 193.42241 134.07384 194.68814 132.74292 c
195.95387 131.41043 198.07428 131.41043 199.33853 132.74292 c
W*
0 0 344 154 rc
188.73883 143.63828 m
205.28783 143.63828 l
205.28783 126.74355 l
188.73883 126.74355 l
h
f
Q
q
194.15582 128.1524 m
199.87233 128.1524 l
199.87233 103.69147 l
194.15582 103.69147 l
194.15582 128.1524 l
h
W*
0 0 344 154 rc
189.15582 133.1524 m
204.87233 133.1524 l
204.87233 98.691467 l
189.15582 98.691467 l
h
f
Q
q
206.1389 138.05415 m
211.85393 138.05415 l
211.85393 103.69302 l
206.1389 103.69302 l
206.1389 138.05415 l
h
W*
0 0 344 154 rc
201.1389 143.05415 m
216.85393 143.05415 l
216.85393 98.693024 l
201.1389 98.693024 l
h
f
Q
q
243.89804 128.54156 m
240.9481 128.54156 238.59703 126.84328 236.79898 123.49496 c
235.8334 126.84328 233.29602 128.54156 230.30025 128.54156 c
227.67267 128.54156 225.41179 127.08611 223.61374 124.2219 c
223.61374 128.15396 l
217.89871 128.15396 l
217.89871 103.69302 l
223.61374 103.69302 l
223.61374 112.67168 l
223.61374 119.66097 225.68831 123.39689 228.63971 123.39689 c
230.52945 123.39689 231.49649 122.28078 231.49649 119.99876 c
231.49649 103.69302 l
237.21448 103.69302 l
237.21448 113.20561 l
237.21448 119.80573 239.28905 123.39689 242.23898 123.39689 c
244.13019 123.39689 245.10019 122.28078 245.10019 119.99876 c
245.10019 103.69302 l
250.81522 103.69302 l
250.81522 121.01836 l
250.81522 125.72717 248.18764 128.54156 243.89804 128.54156 c
W*
0 0 344 154 rc
212.89871 133.54156 m
255.81522 133.54156 l
255.81522 98.693024 l
212.89871 98.693024 l
h
f
Q
q
180.9632 70.03083 m
175.01601 70.03083 l
175.01601 79.057747 l
180.9632 79.057747 l
183.7756 79.057747 185.20547 77.554039 185.20547 74.545067 c
185.20547 71.534538 183.7756 70.03083 180.9632 70.03083 c
180.9632 70.03083 l
h
181.19386 84.882668 m
169.02299 84.882668 l
169.02299 50.909145 l
175.01601 50.909145 l
175.01601 64.20591 l
181.19386 64.20591 l
187.78722 64.20591 191.29018 68.332542 191.29018 74.545067 c
191.29018 80.757591 187.78722 84.882668 181.19386 84.882668 c
181.19386 84.882668 l
h
W*
0 0 344 154 rc
164.02299 89.882668 m
196.29018 89.882668 l
196.29018 45.909145 l
164.02299 45.909145 l
h
f
Q
q
201.34508 71.389771 m
201.34508 75.370079 l
195.62709 75.370079 l
195.62709 50.909145 l
201.34508 50.909145 l
201.34508 59.596718 l
201.34508 67.021858 203.92534 70.371735 207.56877 70.371735 c
208.44414 70.371735 209.27219 70.127342 209.96568 69.691483 c
211.02588 75.272011 l
210.01004 75.612915 209.08884 75.757683 208.21495 75.757683 c
205.4942 75.757683 203.00414 74.155907 201.34508 71.389771 c
W*
0 0 344 154 rc
190.62709 80.757683 m
216.02588 80.757683 l
216.02588 45.909145 l
190.62709 45.909145 l
h
f
Q
q
229.79456 57.800362 m
228.73434 56.393166 227.35179 55.664661 225.55226 55.664661 c
223.75569 55.664661 222.37166 56.393166 221.31146 57.800362 c
220.25127 59.25737 219.74408 61.05217 219.74408 63.139614 c
219.74408 65.227058 220.25127 67.021858 221.31146 68.429054 c
222.37166 69.886063 223.75569 70.614571 225.55226 70.614571 c
227.35179 70.614571 228.73434 69.886063 229.79456 68.429054 c
230.85623 67.021858 231.36194 65.227058 231.36194 63.139614 c
231.36194 61.05217 230.85623 59.25737 229.79456 57.800362 c
229.79456 57.800362 l
h
225.55226 75.757683 m
221.91032 75.757683 219.05206 74.545067 216.93314 72.164978 c
214.81126 69.787994 213.75105 66.779022 213.75105 63.139614 c
213.75105 59.49865 214.81126 56.441422 216.93314 54.062885 c
219.05206 51.685905 221.91032 50.519989 225.55226 50.519989 c
229.19569 50.519989 232.05394 51.685905 234.17435 54.062885 c
236.29475 56.441422 237.35495 59.49865 237.35495 63.139614 c
237.35495 66.779022 236.29475 69.787994 234.17435 72.164978 c
232.05394 74.545067 229.19569 75.757683 225.55226 75.757683 c
225.55226 75.757683 l
h
W*
0 0 344 154 rc
208.75105 80.757683 m
242.35495 80.757683 l
242.35495 45.519989 l
208.75105 45.519989 l
h
f
Q
q
242.74911 52.995037 m
242.74911 48.675377 240.9969 46.880581 237.35495 45.909241 c
238.7375 40.621357 l
245.37669 42.22002 248.46414 46.103821 248.46414 53.723541 c
248.46414 75.370079 l
242.74911 75.370079 l
242.74911 52.995037 l
W*
0 0 344 154 rc
232.35495 80.370079 m
253.46414 80.370079 l
253.46414 35.621357 l
232.35495 35.621357 l
h
f
Q
q
259.05728 65.952454 m
259.47131 68.527122 261.36252 70.613014 264.08179 70.613014 c
266.75668 70.613014 268.41428 69.059494 269.06046 65.952454 c
259.05728 65.952454 l
259.05728 65.952454 l
h
264.08179 75.757683 m
256.10587 75.757683 252.92528 68.962982 252.92528 63.139614 c
252.92528 57.314693 256.10587 50.521545 264.08179 50.521545 c
269.15359 50.521545 272.65656 52.898525 274.63797 57.655594 c
270.02896 59.450394 l
268.64642 56.928646 266.75668 55.664661 264.40414 55.664661 c
261.086 55.664661 259.05728 58.237778 258.9183 61.196938 c
274.91595 61.196938 l
274.91595 63.671982 l
274.91595 66.439674 274.08643 69.302322 272.42587 71.680862 c
270.76535 74.157463 267.76956 75.757683 264.08179 75.757683 c
264.08179 75.757683 l
h
W*
0 0 344 154 rc
247.92528 80.757683 m
279.91595 80.757683 l
279.91595 45.521545 l
247.92528 45.521545 l
h
f
Q
q
290.14322 70.613014 m
292.4928 70.613014 294.3367 69.254066 295.58173 66.585999 c
300.69791 68.768402 l
298.89984 73.428963 295.39838 75.757683 290.14322 75.757683 c
286.49979 75.757683 283.73468 74.54351 281.75034 72.166534 c
279.76892 69.786438 278.80038 66.779022 278.80038 63.139614 c
278.80038 59.49865 279.76892 56.489677 281.75034 54.112698 c
283.73468 51.734161 286.49979 50.519989 290.14322 50.519989 c
295.39838 50.519989 298.89984 52.848713 300.69791 57.509274 c
295.58173 59.69323 l
294.3367 57.023602 292.4928 55.664661 290.14322 55.664661 c
286.63879 55.664661 284.79343 58.673634 284.79343 63.139614 c
284.79343 67.604042 286.63879 70.613014 290.14322 70.613014 c
W*
0 0 344 154 rc
273.80038 80.757683 m
305.69791 80.757683 l
305.69791 45.519989 l
273.80038 45.519989 l
h
f
Q
q
318.48624 56.248398 m
317.79272 55.859241 317.05637 55.664661 316.27267 55.664661 c
314.24393 55.664661 313.22958 56.732513 313.22958 59.644974 c
313.22958 70.223854 l
319.3616 70.223854 l
319.3616 75.370079 l
313.22958 75.370079 l
313.22958 85.268715 l
307.51456 81.484535 l
307.51456 75.370079 l
303.91696 75.370079 l
303.91696 70.223854 l
307.51456 70.223854 l
307.51456 59.548462 l
307.51456 53.578773 310.69516 50.519989 316.04199 50.519989 c
317.38019 50.519989 318.62375 50.811077 319.82294 51.394817 c
318.48624 56.248398 l
W*
0 0 344 154 rc
298.91696 90.268715 m
324.82294 90.268715 l
324.82294 45.519989 l
298.91696 45.519989 l
h
f
Q
q
54.19595 123.39689 m
51.478168 123.39689 49.586956 121.311 49.172932 118.73633 c
59.176086 118.73633 l
58.531387 121.84337 56.87085 123.39689 54.19595 123.39689 c
W*
0 0 344 154 rc
44.172932 128.3969 m
64.176086 128.3969 l
64.176086 113.73633 l
44.172932 113.73633 l
h
f
Q
q
130.27611 105.6824 m
128.75456 104.08063 126.77316 103.30542 124.32893 103.30542 c
122.11536 103.30542 120.17979 103.98256 118.56657 105.2948 c
116.95187 106.60548 115.79852 108.15745 115.10799 109.90399 c
119.67113 112.47866 l
120.59383 109.80748 122.16121 108.44854 124.32893 108.44854 c
126.21866 108.44854 127.1857 109.32336 127.1857 111.06991 c
127.1857 111.84667 126.81899 112.47866 125.94215 112.91296 c
125.52812 113.15891 125.0653 113.35194 124.65276 113.4967 c
123.86758 113.88586 122.25288 114.41978 121.37752 114.80739 c
118.42758 116.11807 116.67537 117.91287 116.67537 121.40751 c
116.67537 123.39845 117.36886 125.04692 118.75141 126.45567 c
120.13248 127.86287 121.93053 128.54156 124.09825 128.54156 c
127.1857 128.54156 129.90791 126.94135 131.38214 124.56281 c
127.96939 121.26118 l
126.91067 122.66839 125.6198 123.39845 124.09825 123.39845 c
122.94637 123.39845 121.97785 122.66839 121.97785 121.35925 c
121.97785 120.33966 122.71423 119.56446 124.18993 118.98228 c
125.85047 118.35028 l
127.83188 117.62178 l
128.20154 117.47701 128.75456 117.13611 129.49242 116.70026 c
130.27611 116.26284 130.82765 115.87524 131.14999 115.43782 c
131.84349 114.61281 132.58134 113.15891 132.58134 111.45751 c
132.58134 109.17705 131.79617 107.28418 130.27611 105.6824 c
130.27611 105.6824 l
h
110.86422 103.69302 m
105.14623 103.69302 l
105.14623 107.62508 l
103.2565 104.76087 100.85811 103.30386 97.954018 103.30386 c
93.668854 103.30386 90.80912 105.87698 90.80912 110.68231 c
90.80912 128.15396 l
96.525627 128.15396 l
96.525627 112.47866 l
96.525627 109.80748 97.631668 108.44854 99.84375 108.44854 c
102.79664 108.44854 105.14623 112.23582 105.14623 118.39854 c
105.14623 128.15396 l
110.86422 128.15396 l
110.86422 103.69302 l
110.86422 103.69302 l
h
83.52227 105.6824 m
82.002205 104.08063 80.017838 103.30542 77.575089 103.30542 c
75.363007 103.30542 73.425957 103.98256 71.812737 105.2948 c
70.198036 106.60548 69.046158 108.15745 68.354149 109.90399 c
72.918777 112.47866 l
73.839981 109.80748 75.407364 108.44854 77.575089 108.44854 c
79.463341 108.44854 80.431862 109.32336 80.431862 111.06991 c
80.431862 111.84667 80.063675 112.47866 79.188309 112.91296 c
78.772804 113.15891 78.311462 113.35194 77.897438 113.4967 c
77.113747 113.88586 75.500526 114.41978 74.623672 114.80739 c
71.673744 116.11807 69.920052 117.91287 69.920052 121.40751 c
69.920052 123.39845 70.613541 125.04692 71.996094 126.45567 c
73.377159 127.86287 75.176697 128.54156 77.342934 128.54156 c
80.431862 128.54156 83.152603 126.94135 84.628311 124.56281 c
81.215553 121.26118 l
80.15535 122.66839 78.865959 123.39845 77.342934 123.39845 c
76.192535 123.39845 75.224014 122.66839 75.224014 121.35925 c
75.224014 120.33966 75.960388 119.56446 77.436089 118.98228 c
79.096634 118.35028 l
81.078041 117.62178 l
81.447708 117.47701 82.002205 117.13611 82.738579 116.70026 c
83.52227 116.26284 84.075287 115.87524 84.397636 115.43782 c
85.089653 114.61281 85.826027 113.15891 85.826027 111.45751 c
85.826027 109.17705 85.042336 107.28418 83.52227 105.6824 c
83.52227 105.6824 l
h
65.031593 113.98237 m
49.033936 113.98237 l
49.172932 111.02165 51.201656 108.44854 54.518299 108.44854 c
56.87233 108.44854 58.762058 109.71252 60.144608 112.23427 c
64.755081 110.43792 l
62.772194 105.68085 59.269241 103.30542 54.19595 103.30542 c
46.223 103.30542 43.040916 110.09857 43.040916 115.92349 c
43.040916 121.74841 46.223 128.54156 54.19595 128.54156 c
57.885212 128.54156 60.882462 126.93979 62.542999 124.46474 c
64.202057 122.0862 65.031593 119.22356 65.031593 116.45742 c
65.031593 113.98237 l
65.031593 113.98237 l
h
37.827152 115.63084 m
37.827152 106.84676 34.232521 103.30386 27.547487 103.30386 c
21.969973 103.30386 18.27923 106.60548 17.590172 112.08951 c
23.491516 113.40019 l
23.997219 110.53599 25.379768 109.12879 27.547487 109.12879 c
30.314066 109.12879 31.835609 110.68231 31.835609 114.95371 c
31.835609 137.66499 l
37.827152 137.66499 l
37.827152 115.63084 l
37.827152 115.63084 l
h
142.48839 152.8624 m
7.681653 152.8624 l
3.6789131 152.8624 0.43176955 149.44559 0.43176955 145.23022 c
0.43176955 86.840912 l
0.43176955 83.419434 2.5950532 80.415131 5.726861 79.49205 c
146.26045 38.034233 l
148.00676 37.520542 149.73827 38.901279 149.73827 40.811268 c
149.73827 145.23022 l
149.73827 149.44559 146.4926 152.8624 142.48839 152.8624 c
142.48839 152.8624 l
h
W*
0 0 344 154 rc
-4.5682306 157.8624 m
154.73827 157.8624 l
154.73827 32.926086 l
-4.5682306 32.926086 l
h
f
Q
q
243.28143 84.856209 m
242.0157 83.523727 242.0157 81.289955 243.28143 79.959038 c
244.54716 78.626556 246.66757 78.626556 247.9333 79.959038 c
249.19757 81.289955 249.19757 83.523727 247.9333 84.856209 c
246.66757 86.187126 244.54716 86.187126 243.28143 84.856209 c
W*
0 0 344 154 rc
237.33214 90.854393 m
253.8815 90.854393 l
253.8815 73.959679 l
237.33214 73.959679 l
h
f
Q
q
334.47501 73.86364 m
329.02499 73.86364 325 78.063637 325 83.61364 c
325 89.163635 329.02499 93.36364 334.47501 93.36364 c
339.92499 93.36364 343.95001 89.163635 343.95001 83.61364 c
343.95001 78.063637 339.92499 73.86364 334.47501 73.86364 c
h
334.47501 75.763634 m
338.97501 75.763634 342 79.163635 342 83.61364 c
342 88.063637 338.97501 91.463638 334.47501 91.463638 c
329.97501 91.463638 326.95001 88.063637 326.95001 83.61364 c
326.95001 79.163635 329.97501 75.763634 334.47501 75.763634 c
h
330.89999 78.36364 m
330.89999 88.938637 l
334.72501 88.938637 l
336.875 88.938637 338.10001 87.73864 338.10001 85.888634 c
338.10001 84.288635 337.10001 83.213638 335.77499 82.938637 c
338.82501 78.36364 l
336.85001 78.36364 l
333.875 82.838638 l
332.75 82.838638 l
332.75 78.36364 l
330.89999 78.36364 l
h
332.75 84.413635 m
334.625 84.413635 l
335.75 84.413635 336.27499 84.98864 336.27499 85.888634 c
336.27499 86.813637 335.75 87.36364 334.625 87.36364 c
332.75 87.36364 l
332.75 84.413635 l
h
W*
0 0 344 154 rc
320 98.36364 m
348.95001 98.36364 l
348.95001 68.86364 l
320 68.86364 l
h
f
Q
q
169.209 4 m
173.78799 17.299999 l
175.85899 17.299999 l
180.457 4 l
178.196 4 l
177.132 7.3249998 l
172.534 7.3249998 l
171.451 4 l
169.209 4 l
h
173.142 9.2819996 m
176.505 9.2819996 l
174.83299 14.507 l
173.142 9.2819996 l
h
194.84599 3.848 m
191.616 3.848 188.69 6.1469998 188.69 10.65 c
188.69 15.153 191.63499 17.452 194.84599 17.452 c
197.63901 17.452 199.577 15.97 200.20399 13.5 c
198.285 12.987 l
197.772 14.488 196.746 15.495 194.84599 15.495 c
192.623 15.495 190.83701 13.899 190.83701 10.65 c
190.83701 7.401 192.623 5.8049998 194.84599 5.8049998 c
196.746 5.8049998 197.772 6.8119998 198.285 8.3129997 c
200.20399 7.8000002 l
199.577 5.3299999 197.63901 3.848 194.84599 3.848 c
h
203.817 4 m
203.817 17.299999 l
208.491 17.299999 l
211.056 17.299999 212.46201 15.875 212.46201 13.652 c
212.46201 11.828 211.53101 10.574 209.85899 10.156 c
213.67799 4 l
211.32201 4 l
207.57899 9.9849997 l
205.92599 9.9849997 l
205.92599 4 l
203.817 4 l
h
205.92599 11.942 m
208.491 11.942 l
209.612 11.942 210.353 12.436 210.353 13.652 c
210.353 14.868 209.612 15.343 208.491 15.343 c
205.92599 15.343 l
205.92599 11.942 l
h
220.97701 3.848 m
218.203 3.848 216.132 5.4439998 216.132 8.8070002 c
216.132 17.299999 l
218.241 17.299999 l
218.241 8.75 l
218.241 6.9070001 219.134 5.8049998 220.97701 5.8049998 c
222.80099 5.8049998 223.694 6.9070001 223.694 8.75 c
223.694 17.299999 l
225.80299 17.299999 l
225.80299 8.8070002 l
225.80299 5.4439998 223.73199 3.848 220.97701 3.848 c
h
235.89799 4 m
235.89799 17.299999 l
238.311 17.299999 l
241.69299 8.4840002 l
245.075 17.299999 l
247.46899 17.299999 l
247.46899 4 l
245.379 4 l
245.379 13.006 l
242.43401 5.2160001 l
240.952 5.2160001 l
238.007 13.006 l
238.007 4 l
235.89799 4 l
h
251.823 4 m
251.823 17.299999 l
253.93201 17.299999 l
253.93201 4 l
251.823 4 l
h
258.28601 4 m
258.28601 17.299999 l
260.547 17.299999 l
265.94299 7.7620001 l
265.94299 17.299999 l
268.052 17.299999 l
268.052 4 l
265.79102 4 l
260.39499 13.519 l
260.39499 4 l
258.28601 4 l
h
272.40601 4 m
272.40601 17.299999 l
274.51501 17.299999 l
274.51501 4 l
272.40601 4 l
h
282.327 3.848 m
279.97101 3.848 278.28 5.52 277.88101 7.5339999 c
279.60999 8.5979996 l
279.98999 7.0780001 280.80701 5.8049998 282.384 5.8049998 c
283.46701 5.8049998 284.30301 6.375 284.30301 7.6859999 c
284.30301 9.0159998 282.87799 9.6049995 281.30099 10.384 c
279.914 11.068 278.66 12.075 278.66 14.032 c
278.66 15.989 280.142 17.452 282.21301 17.452 c
284.07501 17.452 285.19601 16.577999 285.80399 15.153 c
284.11301 14.07 l
283.69501 15.153 282.992 15.495 282.21301 15.495 c
281.33899 15.495 280.69299 14.868 280.69299 14.108 c
280.69299 12.873 281.98499 12.284 283.39099 11.657 c
285.00601 10.916 286.431 9.9659996 286.431 7.7810001 c
286.431 5.3870001 284.702 3.848 282.327 3.848 c
h
291.88699 4 m
291.88699 15.343 l
288.10599 15.343 l
288.10599 17.299999 l
297.77701 17.299999 l
297.77701 15.343 l
293.996 15.343 l
293.996 4 l
291.88699 4 l
h
300.668 4 m
300.668 17.299999 l
305.34201 17.299999 l
307.90701 17.299999 309.31299 15.875 309.31299 13.652 c
309.31299 11.828 308.38199 10.574 306.70999 10.156 c
310.52899 4 l
308.173 4 l
304.42999 9.9849997 l
302.77701 9.9849997 l
302.77701 4 l
300.668 4 l
h
302.77701 11.942 m
305.34201 11.942 l
306.46301 11.942 307.20401 12.436 307.20401 13.652 c
307.20401 14.868 306.46301 15.343 305.34201 15.343 c
302.77701 15.343 l
302.77701 11.942 l
h
316.289 4 m
316.289 9.6999998 l
312.39401 17.299999 l
314.69299 17.299999 l
317.33401 11.79 l
319.97501 17.299999 l
322.27399 17.299999 l
318.379 9.6999998 l
318.379 4 l
316.289 4 l
h
W*
0 0 344 154 rc
164.209 22.452 m
327.27399 22.452 l
327.27399 -1.152 l
164.209 -1.152 l
h
f
ep
end
%%Trailer
%%EOF
